<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Factorable Quadratic Generator</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-blue: hsl(210, 80%, 55%);
            --secondary-green: hsl(120, 70%, 50%);
            --accent-purple: hsl(270, 70%, 60%);
            --text-dark: hsl(0, 0%, 20%);
            --bg-white: #FFFFFF;
            --light-gray: hsl(0, 0%, 95%);
            --shadow-color: rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--bg-white);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            color: var(--text-dark);
            overflow: hidden; /* Prevent scrollbar from colorful background elements */
            position: relative;
        }

        /* Background circles for visual appeal */
        body::before, body::after {
            content: '';
            position: absolute;
            border-radius: 50%;
            opacity: 0.1;
            filter: blur(80px); /* Soften the circles */
        }

        body::before {
            width: 300px;
            height: 300px;
            background-color: var(--primary-blue);
            top: -100px;
            left: -100px;
        }

        body::after {
            width: 400px;
            height: 400px;
            background-color: var(--secondary-green);
            bottom: -150px;
            right: -150px;
        }

        .container {
            background-color: var(--light-gray);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 15px 30px var(--shadow-color);
            text-align: center;
            width: 90%;
            max-width: 600px;
            position: relative; /* For z-index to be above background circles */
            z-index: 1;
        }

        h1 {
            color: var(--accent-purple);
            margin-bottom: 30px;
            font-size: 2.5em;
            font-weight: 700;
        }

        .equation-display {
            background-color: var(--bg-white);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            min-height: 80px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            font-weight: 600;
            color: var(--text-dark);
            box-shadow: inset 0 2px 5px rgba(0,0,0,0.05);
            transition: all 0.3s ease-in-out;
            border: 2px solid var(--primary-blue);
        }

        .equation-display.empty {
            color: hsl(0, 0%, 50%);
            font-size: 1.5em;
            border-style: dashed;
        }

        .button-group {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 30px;
        }

        button {
            padding: 15px 25px;
            border: none;
            border-radius: 10px;
            font-size: 1.1em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 10px rgba(0,0,0,0.1);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.2);
        }

        #generateBtn {
            background-color: var(--primary-blue);
            color: var(--bg-white);
        }

        #generateBtn:hover {
            background-color: hsl(210, 80%, 45%);
        }

        #showAnswerBtn {
            background-color: var(--secondary-green);
            color: var(--bg-white);
        }

        #showAnswerBtn:hover {
            background-color: hsl(120, 70%, 40%);
        }

        #showAnswerBtn:disabled {
            background-color: hsl(0, 0%, 70%);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .answer-display {
            background-color: var(--bg-white);
            border-radius: 15px;
            padding: 20px;
            min-height: 60px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.8em;
            font-weight: 600;
            color: var(--accent-purple);
            border: 2px dashed var(--accent-purple);
            box-shadow: inset 0 2px 5px rgba(0,0,0,0.05);
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.4s ease-out, transform 0.4s ease-out;
        }

        .answer-display.visible {
            opacity: 1;
            transform: translateY(0);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            h1 {
                font-size: 2em;
            }
            .equation-display {
                font-size: 1.6em;
                padding: 20px;
            }
            .answer-display {
                font-size: 1.4em;
                padding: 15px;
            }
            button {
                padding: 12px 20px;
                font-size: 1em;
            }
            .container {
                padding: 25px;
            }
        }

        @media (max-width: 480px) {
            h1 {
                font-size: 1.8em;
            }
            .equation-display {
                font-size: 1.4em;
            }
            .answer-display {
                font-size: 1.2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Factorable Quadratics</h1>
        <div id="equationDisplay" class="equation-display empty">
            Click 'Generate New Equation'
        </div>

        <div class="button-group">
            <button id="generateBtn">Generate New Equation</button>
            <button id="showAnswerBtn" disabled>Show Answer</button>
        </div>

        <div id="answerDisplay" class="answer-display">
            </div>
    </div>

    <script>
        const equationDisplay = document.getElementById('equationDisplay');
        const generateBtn = document.getElementById('generateBtn');
        const showAnswerBtn = document.getElementById('showAnswerBtn');
        const answerDisplay = document.getElementById('answerDisplay');

        let currentRoots = [];

        // Helper function to get a random integer within a range (inclusive)
        function getRandomInt(min, max) {
            min = Math.ceil(min);
            max = Math.floor(max);
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        // Function to format the quadratic equation string
        function formatEquation(a, b, c) {
            let equation = '';

            // Term for ax^2
            if (a === 1) equation += 'x²';
            else if (a === -1) equation += '-x²';
            else equation += `${a}x²`;

            // Term for bx
            if (b > 0) {
                equation += ` + ${b}`;
                if (b !== 1) equation += 'x';
                else equation += 'x';
            } else if (b < 0) {
                equation += ` - ${Math.abs(b)}`;
                if (b !== -1) equation += 'x';
                else equation += 'x';
            }
            // If b is 0, we don't add the x term

            // Term for c
            if (c > 0) {
                equation += ` + ${c}`;
            } else if (c < 0) {
                equation += ` - ${Math.abs(c)}`;
            }

            return equation + ' = 0';
        }

        function generateQuadratic() {
            // Choose random integers for factors (px+q) and (rx+s)
            // p and r should not be zero to ensure it's a quadratic
            let p = getRandomInt(-5, 5);
            while (p === 0) p = getRandomInt(-5, 5);

            let r = getRandomInt(-5, 5);
            while (r === 0) r = getRandomInt(-5, 5);

            let q = getRandomInt(-10, 10);
            let s = getRandomInt(-10, 10);

            // Calculate coefficients for ax^2 + bx + c = 0
            const a = p * r;
            const b = (p * s) + (q * r);
            const c = q * s;

            // Calculate roots
            currentRoots = [
                -q / p,
                -s / r
            ].sort((val1, val2) => val1 - val2); // Sort roots for consistent display

            // Format roots nicely (e.g., as fractions if not whole numbers)
            const formatRoot = (root) => {
                if (root % 1 === 0) { // If integer
                    return root.toString();
                } else { // If not integer, try to represent as fraction
                    const tolerance = 1e-9; // Small tolerance for floating point comparisons
                    const commonDivisor = (num1, num2) => {
                        return num2 === 0 ? num1 : commonDivisor(num2, num1 % num2);
                    };

                    const num = root * 10000; // Multiply to make it an integer for GCD calculation
                    const den = 10000;
                    const gcd = commonDivisor(Math.round(Math.abs(num)), Math.abs(den));
                    return `${Math.round(num / gcd)}/${den / gcd}`;
                }
            };

            const formattedRoots = currentRoots.map(formatRoot);

            equationDisplay.textContent = formatEquation(a, b, c);
            equationDisplay.classList.remove('empty');
            answerDisplay.classList.remove('visible'); // Hide previous answer
            showAnswerBtn.disabled = false; // Enable show answer button
        }

        // Event Listeners
        generateBtn.addEventListener('click', generateQuadratic);
        showAnswerBtn.addEventListener('click', () => {
            answerDisplay.innerHTML = `Roots: ${currentRoots.map(root => {
                // Ensure fractions are simplified
                if (root % 1 !== 0) {
                    const numerator = currentRoots[0] === root ? -currentRoots[0] * 100 : -currentRoots[1] * 100;
                    const denominator = 100;
                    const gcdVal = (a, b) => b === 0 ? a : gcdVal(b, a % b);
                    const common = gcdVal(Math.abs(numerator), Math.abs(denominator));
                    return `${numerator / common}/${denominator / common}`;
                }
                return root;
            }).join(', ')}`;
             // This simplification above is not robust for general rational numbers.
             // Let's re-implement robust fraction formatting.

            const formatFraction = (value) => {
                if (value % 1 === 0) return value.toString();

                const epsilon = 1e-6; // Tolerance for floating point precision issues
                for (let denominator = 1; denominator <= 100; denominator++) { // Try denominators up to 100
                    const numerator = value * denominator;
                    if (Math.abs(numerator - Math.round(numerator)) < epsilon) {
                        return `${Math.round(numerator)}/${denominator}`;
                    }
                }
                return value.toFixed(2); // Fallback if no simple fraction found
            };

            answerDisplay.textContent = `Roots: ${currentRoots.map(formatFraction).join(', ')}`;
            answerDisplay.classList.add('visible');
        });

        // Initial generation when the page loads
        generateQuadratic();

    </script>
</body>
</html>
